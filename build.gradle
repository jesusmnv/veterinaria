plugins{
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"

}


group = 'org.bedu.java.backend'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.xerial:sqlite-jdbc:3.44.1.0'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'com.h2database:h2:2.2.224'
	//runtimeOnly 'com.mysql:mysql-connector-j'
	//implementation 'com.mysql:mysql-connector-j:8.3.0'
	implementation 'org.hibernate.orm:hibernate-community-dialects:6.4.2.Final'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	


}



tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
	
}





/*
tasks.named('test') {
    useJUnitPlatform()
	finalizedBy jacocoTestReport
	exclude 
   
}
*/



jacocoTestReport {
    reports {
        xml.required = true
    }

		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
						fileTree(dir: it,
								exclude: [
									'org/bedu/dto/**',
									'org/bedu/model/**',
									'org/bedu/mapper/**',
									'org/bedu/Application.class'
								]
						)
			}))
		}
}

sonarqube{
	properties{
		propierty "sonar.exclusions", "**/*Genereted.java"
		property "sonar.host.url", sonar.host.url
        property "sonar.organization", sonar.organization
        property "sonar.projectKey", sonar.projectKey
        property "sonar.login", sonar.login
        property "sonar.jacoco.reportPath", sonar.jacoco.reportPath



	}
}


sonar {
    properties {
        properties["sonar.sources"] += sourceSets.custom.allSource.srcDirs
        properties["sonar.tests"] += sourceSets.integTest.allSource.srcDirs
    }
}